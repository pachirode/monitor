syntax = "proto3";

package v1;

// 提供用于定义 HTTP 映射的功能，比如通过 option (google.api.http) 实现 gRPC 到 HTTP 的映射
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "apiserver/v1/healthz.proto";
import "apiserver/v1/cpu.proto";
// 为生成 OpenAPI 文档提供相关注释（如标题、版本、作者、许可证等信息）
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/pachirode/monitor/pkg/api/apiserver/v1;v1";

// OpenAPI 全局配置，提供详细配置信息，用于生成 OpenAPI 文档
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        // API名称
        title: "Monitor API";
        // API版本
        version: "1.0";
        // API 描述
        description: "";
        // 开发者的联系方式，包括项目名称、网址和电子邮件
        contact: {
            name: "计算机资源监控";
            url: "https://github.com/pachirode/monitor";
            email: "pachirode@gmail.com";
        };
    };
    //  指定访问协议为 HTTPS
    schemes: HTTPS;
    // 定义了服务的请求和响应的数据格式为 application/json
    consumes: "application/json";
    produces: "application/json";
};

service Monitor {
    rpc Healthz(google.protobuf.Empty) returns (HealthzResponse) {
        // 通过 google.api.http 注释，指定 HTTP 方法为 GET、URL路径为 /healthz
        option (google.api.http) = {
            get: "/healthz",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            // 在 OpenAPI 文档中的接口简要描述，为“服务健康检查”
            summary: "服务健康检查";
            // 标识该操作的唯一ID，为“Healthz”
            operation_id: "Healthz";
            // 将该接口归类为“服务治理”
            tags: "服务治理";
        };
    }

    rpc CPUMonitor(google.protobuf.Empty) returns (GetCPUResponse) {
        option (google.api.http) = {
            get: "/v1/cpu",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "CPU 监控器";
            operation_id: "CPUMonitor";
            tags : "资源监控";
        };
    }
}